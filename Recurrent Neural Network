{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "authorship_tag": "ABX9TyMN6OhFz6MkPn5+bXJsiVzK",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    },
    "accelerator": "GPU",
    "gpuClass": "standard"
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/Devansh-Narwariya/Projects-at-DRDO/blob/main/Recurrent%20Neural%20Network\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 1,
      "metadata": {
        "id": "hWSgNopjaoEj"
      },
      "outputs": [],
      "source": [
        "#Setup\n",
        "import tensorflow as tf\n",
        "\n",
        "import numpy as np\n",
        "import os\n",
        "import time"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#Download Shakespeare Dataset\n",
        "path_to_file = tf.keras.utils.get_file('shakespeare.txt', 'https://storage.googleapis.com/download.tensorflow.org/data/shakespeare.txt')"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "tGF17LEBatR4",
        "outputId": "c0b4fe88-0bc3-4f85-aedb-6a8ab18671a7"
      },
      "execution_count": 2,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Downloading data from https://storage.googleapis.com/download.tensorflow.org/data/shakespeare.txt\n",
            "1122304/1115394 [==============================] - 0s 0us/step\n",
            "1130496/1115394 [==============================] - 0s 0us/step\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#Read the data\n",
        "# Read, then decode for py2 compat.\n",
        "text = open(path_to_file, 'rb').read().decode(encoding='utf-8')\n",
        "# length of text is the number of characters in it\n",
        "print(f'Length of text: {len(text)} characters')"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "qp3GeHbpbBum",
        "outputId": "c50c99a6-41df-4838-c5e2-f25073d7c28c"
      },
      "execution_count": 3,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Length of text: 1115394 characters\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Take a look at the first 250 characters in text\n",
        "print(text[:250])"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "ODHv9saJbQXh",
        "outputId": "eb35b2e2-f028-4a9c-d359-3e17f6f2f433"
      },
      "execution_count": 4,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "First Citizen:\n",
            "Before we proceed any further, hear me speak.\n",
            "\n",
            "All:\n",
            "Speak, speak.\n",
            "\n",
            "First Citizen:\n",
            "You are all resolved rather to die than to famish?\n",
            "\n",
            "All:\n",
            "Resolved. resolved.\n",
            "\n",
            "First Citizen:\n",
            "First, you know Caius Marcius is chief enemy to the people.\n",
            "\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# The unique characters in the file\n",
        "vocab = sorted(set(text))\n",
        "print(f'{len(vocab)} unique characters')"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "mW6BEiNvbcQb",
        "outputId": "70c0b14e-52a1-4c69-c275-7ec653a9bb36"
      },
      "execution_count": 5,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "65 unique characters\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#Process the text\n",
        "\"\"\"\n",
        "Before training : Convert string to numerical representation.\n",
        "tf.keras.layers.StringLookup converts each character into a numeric ID => needs the text to be split into tokens first\n",
        "\"\"\"\n",
        "#Vectorize the text : Text to tokens\n",
        "example_texts = ['abcdefg', 'xyz']\n",
        "\n",
        "chars = tf.strings.unicode_split(example_texts, input_encoding='UTF-8')\n",
        "chars"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "4hWtHl5Wbfxz",
        "outputId": "bf131793-4f90-4f01-ef39-adee790ae3d6"
      },
      "execution_count": 6,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<tf.RaggedTensor [[b'a', b'b', b'c', b'd', b'e', b'f', b'g'], [b'x', b'y', b'z']]>"
            ]
          },
          "metadata": {},
          "execution_count": 6
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#Tokens to numeric IDs\n",
        "ids_from_chars = tf.keras.layers.StringLookup(vocabulary=list(vocab), mask_token=None)\n",
        "ids = ids_from_chars(chars)\n",
        "ids"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "-bquKxu7cHdn",
        "outputId": "16fc0c36-a3ea-4906-803f-faf592d7e3d3"
      },
      "execution_count": 7,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<tf.RaggedTensor [[40, 41, 42, 43, 44, 45, 46], [63, 64, 65]]>"
            ]
          },
          "metadata": {},
          "execution_count": 7
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "\"\"\"\n",
        "Goal of program : Generate text\n",
        "So invert the representation : Recover human readable strings\n",
        "\"\"\"\n",
        "#Numeric Ids to tokens\n",
        "chars_from_ids = tf.keras.layers.StringLookup(vocabulary=ids_from_chars.get_vocabulary(), invert=True, mask_token=None)\n",
        "chars = chars_from_ids(ids)\n",
        "chars"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "fl9wADjfcezO",
        "outputId": "1f101deb-5923-4183-abaf-ad483eb23267"
      },
      "execution_count": 8,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<tf.RaggedTensor [[b'a', b'b', b'c', b'd', b'e', b'f', b'g'], [b'x', b'y', b'z']]>"
            ]
          },
          "metadata": {},
          "execution_count": 8
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#Tokens to string\n",
        "tf.strings.reduce_join(chars, axis=-1).numpy()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "cnDHbVAzcwyn",
        "outputId": "4c9fa1bb-71eb-4bf4-8e2d-8db0fb23d587"
      },
      "execution_count": 9,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "array([b'abcdefg', b'xyz'], dtype=object)"
            ]
          },
          "metadata": {},
          "execution_count": 9
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "def text_from_ids(ids):\n",
        "  return tf.strings.reduce_join(chars_from_ids(ids), axis=-1)"
      ],
      "metadata": {
        "id": "uhQ-BChdc2uC"
      },
      "execution_count": 10,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "#Convert whole text to numeric ids\n",
        "all_ids = ids_from_chars(tf.strings.unicode_split(text, 'UTF-8'))\n",
        "all_ids"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "sCsE3t7Zc80C",
        "outputId": "097fdee0-5e16-40b4-d936-e032173a93a7"
      },
      "execution_count": 11,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<tf.Tensor: shape=(1115394,), dtype=int64, numpy=array([19, 48, 57, ..., 46,  9,  1])>"
            ]
          },
          "metadata": {},
          "execution_count": 11
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "ids_dataset = tf.data.Dataset.from_tensor_slices(all_ids)\n",
        "for ids in ids_dataset.take(14):\n",
        "    print(chars_from_ids(ids).numpy().decode('utf-8'))"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "O4reiD-PdDkr",
        "outputId": "3367dcb0-8795-4bcf-b76f-9f6b42d1e418"
      },
      "execution_count": 12,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "F\n",
            "i\n",
            "r\n",
            "s\n",
            "t\n",
            " \n",
            "C\n",
            "i\n",
            "t\n",
            "i\n",
            "z\n",
            "e\n",
            "n\n",
            ":\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#Individual characters to sequences of desired size\n",
        "seq_length = 100\n",
        "sequences = ids_dataset.batch(seq_length+1, drop_remainder=True)\n",
        "\n",
        "for seq in sequences.take(1):\n",
        "  print(chars_from_ids(seq))"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "UdzJ_bYYdWDU",
        "outputId": "17473ea3-94f3-4a42-feba-ab526f6fd52f"
      },
      "execution_count": 13,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "tf.Tensor(\n",
            "[b'F' b'i' b'r' b's' b't' b' ' b'C' b'i' b't' b'i' b'z' b'e' b'n' b':'\n",
            " b'\\n' b'B' b'e' b'f' b'o' b'r' b'e' b' ' b'w' b'e' b' ' b'p' b'r' b'o'\n",
            " b'c' b'e' b'e' b'd' b' ' b'a' b'n' b'y' b' ' b'f' b'u' b'r' b't' b'h'\n",
            " b'e' b'r' b',' b' ' b'h' b'e' b'a' b'r' b' ' b'm' b'e' b' ' b's' b'p'\n",
            " b'e' b'a' b'k' b'.' b'\\n' b'\\n' b'A' b'l' b'l' b':' b'\\n' b'S' b'p' b'e'\n",
            " b'a' b'k' b',' b' ' b's' b'p' b'e' b'a' b'k' b'.' b'\\n' b'\\n' b'F' b'i'\n",
            " b'r' b's' b't' b' ' b'C' b'i' b't' b'i' b'z' b'e' b'n' b':' b'\\n' b'Y'\n",
            " b'o' b'u' b' '], shape=(101,), dtype=string)\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "for seq in sequences.take(5):\n",
        "  print(text_from_ids(seq).numpy())"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "WBN2zsV0dgCp",
        "outputId": "bacb410e-1ceb-4ee6-eaaa-35c19c6e4dea"
      },
      "execution_count": 14,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "b'First Citizen:\\nBefore we proceed any further, hear me speak.\\n\\nAll:\\nSpeak, speak.\\n\\nFirst Citizen:\\nYou '\n",
            "b'are all resolved rather to die than to famish?\\n\\nAll:\\nResolved. resolved.\\n\\nFirst Citizen:\\nFirst, you k'\n",
            "b\"now Caius Marcius is chief enemy to the people.\\n\\nAll:\\nWe know't, we know't.\\n\\nFirst Citizen:\\nLet us ki\"\n",
            "b\"ll him, and we'll have corn at our own price.\\nIs't a verdict?\\n\\nAll:\\nNo more talking on't; let it be d\"\n",
            "b'one: away, away!\\n\\nSecond Citizen:\\nOne word, good citizens.\\n\\nFirst Citizen:\\nWe are accounted poor citi'\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "def split_input_target(sequence):\n",
        "    input_text = sequence[:-1]\n",
        "    target_text = sequence[1:]\n",
        "    return input_text, target_text"
      ],
      "metadata": {
        "id": "uLSbPGDDdqAL"
      },
      "execution_count": 15,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "split_input_target(list(\"Devansh\"))"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "qmvJSpgMdugf",
        "outputId": "e2444481-e9b3-4a2b-96e5-95a9543d87ed"
      },
      "execution_count": 16,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "(['D', 'e', 'v', 'a', 'n', 's'], ['e', 'v', 'a', 'n', 's', 'h'])"
            ]
          },
          "metadata": {},
          "execution_count": 16
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "dataset = sequences.map(split_input_target)\n",
        "for input_example, target_example in dataset.take(1):\n",
        "    print(\"Input :\", text_from_ids(input_example).numpy())\n",
        "    print(\"Target:\", text_from_ids(target_example).numpy())"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "Kp0qJYuBeEsU",
        "outputId": "4f2e10dc-c3e0-4660-84fd-77e7b634b7b1"
      },
      "execution_count": 17,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Input : b'First Citizen:\\nBefore we proceed any further, hear me speak.\\n\\nAll:\\nSpeak, speak.\\n\\nFirst Citizen:\\nYou'\n",
            "Target: b'irst Citizen:\\nBefore we proceed any further, hear me speak.\\n\\nAll:\\nSpeak, speak.\\n\\nFirst Citizen:\\nYou '\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#Create Training Batches\n",
        "# Batch size\n",
        "BATCH_SIZE = 64\n",
        "\n",
        "# Buffer size to shuffle the dataset\n",
        "BUFFER_SIZE = 10000\n",
        "\n",
        "dataset = (dataset.shuffle(BUFFER_SIZE).batch(BATCH_SIZE, drop_remainder=True).prefetch(tf.data.experimental.AUTOTUNE))\n",
        "dataset"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "-IgFLnhPeXEs",
        "outputId": "4749f76b-46a6-4c53-da19-e52fa1e94b4f"
      },
      "execution_count": 18,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<PrefetchDataset element_spec=(TensorSpec(shape=(64, 100), dtype=tf.int64, name=None), TensorSpec(shape=(64, 100), dtype=tf.int64, name=None))>"
            ]
          },
          "metadata": {},
          "execution_count": 18
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#Build the model\n",
        "# Length of the vocabulary in StringLookup Layer\n",
        "vocab_size = len(ids_from_chars.get_vocabulary())\n",
        "\n",
        "# The embedding dimension\n",
        "embedding_dim = 256\n",
        "\n",
        "# Number of RNN units\n",
        "rnn_units = 1024"
      ],
      "metadata": {
        "id": "kHxndbPAejGi"
      },
      "execution_count": 19,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "class MyModel(tf.keras.Model):\n",
        "  def __init__(self, vocab_size, embedding_dim, rnn_units):\n",
        "    super().__init__(self)\n",
        "    self.embedding = tf.keras.layers.Embedding(vocab_size, embedding_dim)\n",
        "    self.gru = tf.keras.layers.GRU(rnn_units,\n",
        "                                   return_sequences=True,\n",
        "                                   return_state=True)\n",
        "    self.dense = tf.keras.layers.Dense(vocab_size)\n",
        "\n",
        "  def call(self, inputs, states=None, return_state=False, training=False):\n",
        "    x = inputs\n",
        "    x = self.embedding(x, training=training)\n",
        "    if states is None:\n",
        "      states = self.gru.get_initial_state(x)\n",
        "    x, states = self.gru(x, initial_state=states, training=training)\n",
        "    x = self.dense(x, training=training)\n",
        "\n",
        "    if return_state:\n",
        "      return x, states\n",
        "    else:\n",
        "      return x"
      ],
      "metadata": {
        "id": "uzmkjYOzemZV"
      },
      "execution_count": 20,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "model = MyModel(vocab_size=vocab_size, embedding_dim=embedding_dim, rnn_units=rnn_units)\n",
        "for input_example_batch, target_example_batch in dataset.take(1):\n",
        "    example_batch_predictions = model(input_example_batch)\n",
        "    print(example_batch_predictions.shape, \"# (batch_size, sequence_length, vocab_size)\")\n",
        "model.summary()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "2evgSbZSeuOT",
        "outputId": "b57c515f-9bf0-480a-dae9-ba33d91b0bef"
      },
      "execution_count": 21,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "(64, 100, 66) # (batch_size, sequence_length, vocab_size)\n",
            "Model: \"my_model\"\n",
            "_________________________________________________________________\n",
            " Layer (type)                Output Shape              Param #   \n",
            "=================================================================\n",
            " embedding (Embedding)       multiple                  16896     \n",
            "                                                                 \n",
            " gru (GRU)                   multiple                  3938304   \n",
            "                                                                 \n",
            " dense (Dense)               multiple                  67650     \n",
            "                                                                 \n",
            "=================================================================\n",
            "Total params: 4,022,850\n",
            "Trainable params: 4,022,850\n",
            "Non-trainable params: 0\n",
            "_________________________________________________________________\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#Try the model\n",
        "sampled_indices = tf.random.categorical(example_batch_predictions[0], num_samples=1)\n",
        "sampled_indices = tf.squeeze(sampled_indices, axis=-1).numpy()\n",
        "sampled_indices"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "grP92J8MfFS6",
        "outputId": "d6f6146f-a93f-4166-82fe-52ac172246e5"
      },
      "execution_count": 22,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "array([10, 38, 43, 55, 46, 33, 33, 41,  8, 38, 45, 22, 13, 21,  7,  8, 11,\n",
              "        7, 12, 57, 14, 53, 44, 26, 50, 15, 47, 55, 48, 15, 17, 55, 27, 19,\n",
              "       53, 26, 22, 49, 49, 54, 45, 51, 59, 22, 30,  2,  1,  2,  5, 31, 62,\n",
              "       13, 29,  8, 42, 37, 16, 42, 62, 32, 62, 19, 51, 33, 26, 63, 49, 51,\n",
              "       53, 11, 33, 33, 52,  4, 53, 27, 19, 12,  9, 57,  9, 37, 21, 22,  7,\n",
              "        1, 28, 14, 23, 63, 31, 61, 36, 61,  2, 24, 25, 19, 14, 14])"
            ]
          },
          "metadata": {},
          "execution_count": 22
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "print(\"Input:\\n\", text_from_ids(input_example_batch[0]).numpy())\n",
        "print()\n",
        "print(\"Next Char Predictions:\\n\", text_from_ids(sampled_indices).numpy())"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "enB4V3IefOl5",
        "outputId": "7882fc34-117a-4579-d660-cf81a224763f"
      },
      "execution_count": 23,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Input:\n",
            " b\"t would have mounted.\\nSee how my sword weeps for the poor king's death!\\nO, may such purple tears be \"\n",
            "\n",
            "Next Char Predictions:\n",
            " b'3YdpgTTb-YfI?H,-:,;rAneMkBhpiBDpNFnMIjjofltIQ \\n &Rw?P-cXCcwSwFlTMxjln:TTm$nNF;.r.XHI,\\nOAJxRvWv KLFAA'\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#Attatch optimizer and a loss function\n",
        "loss = tf.losses.SparseCategoricalCrossentropy(from_logits=True)\n",
        "example_batch_mean_loss = loss(target_example_batch, example_batch_predictions)\n",
        "print(\"Prediction shape: \", example_batch_predictions.shape, \" # (batch_size, sequence_length, vocab_size)\")\n",
        "print(\"Mean loss:        \", example_batch_mean_loss)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "FfO7lUyafWiw",
        "outputId": "48624e84-8e09-433c-d372-5c4496aa01ce"
      },
      "execution_count": 24,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Prediction shape:  (64, 100, 66)  # (batch_size, sequence_length, vocab_size)\n",
            "Mean loss:         tf.Tensor(4.190532, shape=(), dtype=float32)\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "tf.exp(example_batch_mean_loss).numpy()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "DFX0U3dsfdQM",
        "outputId": "d54e05f8-3e04-4c68-d14c-63e74a8c09b1"
      },
      "execution_count": 25,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "66.05794"
            ]
          },
          "metadata": {},
          "execution_count": 25
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "model.compile(optimizer='adam', loss=loss)"
      ],
      "metadata": {
        "id": "ivOKWgzsfkLC"
      },
      "execution_count": 26,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "#Configure checkpoints\n",
        "\n",
        "# Directory where the checkpoints will be saved\n",
        "checkpoint_dir = './training_checkpoints'\n",
        "# Name of the checkpoint files\n",
        "checkpoint_prefix = os.path.join(checkpoint_dir, \"ckpt_{epoch}\")\n",
        "\n",
        "checkpoint_callback = tf.keras.callbacks.ModelCheckpoint(filepath=checkpoint_prefix,save_weights_only=True)\n",
        "\n",
        "#Execute the training\n",
        "EPOCHS = 50\n",
        "history = model.fit(dataset, epochs=EPOCHS, callbacks=[checkpoint_callback])"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "AU21ZoAYfrQi",
        "outputId": "d14b4e73-abda-4bce-e2c0-40614b9e570b"
      },
      "execution_count": 27,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Epoch 1/50\n",
            "172/172 [==============================] - 11s 48ms/step - loss: 2.7226\n",
            "Epoch 2/50\n",
            "172/172 [==============================] - 9s 48ms/step - loss: 1.9917\n",
            "Epoch 3/50\n",
            "172/172 [==============================] - 9s 48ms/step - loss: 1.7130\n",
            "Epoch 4/50\n",
            "172/172 [==============================] - 10s 49ms/step - loss: 1.5522\n",
            "Epoch 5/50\n",
            "172/172 [==============================] - 10s 50ms/step - loss: 1.4514\n",
            "Epoch 6/50\n",
            "172/172 [==============================] - 10s 49ms/step - loss: 1.3823\n",
            "Epoch 7/50\n",
            "172/172 [==============================] - 10s 50ms/step - loss: 1.3290\n",
            "Epoch 8/50\n",
            "172/172 [==============================] - 10s 50ms/step - loss: 1.2831\n",
            "Epoch 9/50\n",
            "172/172 [==============================] - 10s 51ms/step - loss: 1.2419\n",
            "Epoch 10/50\n",
            "172/172 [==============================] - 10s 51ms/step - loss: 1.2026\n",
            "Epoch 11/50\n",
            "172/172 [==============================] - 10s 52ms/step - loss: 1.1620\n",
            "Epoch 12/50\n",
            "172/172 [==============================] - 10s 52ms/step - loss: 1.1199\n",
            "Epoch 13/50\n",
            "172/172 [==============================] - 10s 53ms/step - loss: 1.0775\n",
            "Epoch 14/50\n",
            "172/172 [==============================] - 10s 54ms/step - loss: 1.0312\n",
            "Epoch 15/50\n",
            "172/172 [==============================] - 10s 53ms/step - loss: 0.9820\n",
            "Epoch 16/50\n",
            "172/172 [==============================] - 10s 54ms/step - loss: 0.9319\n",
            "Epoch 17/50\n",
            "172/172 [==============================] - 10s 54ms/step - loss: 0.8782\n",
            "Epoch 18/50\n",
            "172/172 [==============================] - 10s 54ms/step - loss: 0.8250\n",
            "Epoch 19/50\n",
            "172/172 [==============================] - 10s 54ms/step - loss: 0.7739\n",
            "Epoch 20/50\n",
            "172/172 [==============================] - 10s 54ms/step - loss: 0.7263\n",
            "Epoch 21/50\n",
            "172/172 [==============================] - 11s 55ms/step - loss: 0.6809\n",
            "Epoch 22/50\n",
            "172/172 [==============================] - 11s 54ms/step - loss: 0.6397\n",
            "Epoch 23/50\n",
            "172/172 [==============================] - 10s 54ms/step - loss: 0.6041\n",
            "Epoch 24/50\n",
            "172/172 [==============================] - 11s 55ms/step - loss: 0.5731\n",
            "Epoch 25/50\n",
            "172/172 [==============================] - 10s 54ms/step - loss: 0.5499\n",
            "Epoch 26/50\n",
            "172/172 [==============================] - 11s 55ms/step - loss: 0.5277\n",
            "Epoch 27/50\n",
            "172/172 [==============================] - 10s 54ms/step - loss: 0.5086\n",
            "Epoch 28/50\n",
            "172/172 [==============================] - 11s 55ms/step - loss: 0.4930\n",
            "Epoch 29/50\n",
            "172/172 [==============================] - 11s 54ms/step - loss: 0.4801\n",
            "Epoch 30/50\n",
            "172/172 [==============================] - 11s 54ms/step - loss: 0.4709\n",
            "Epoch 31/50\n",
            "172/172 [==============================] - 10s 54ms/step - loss: 0.4634\n",
            "Epoch 32/50\n",
            "172/172 [==============================] - 11s 55ms/step - loss: 0.4540\n",
            "Epoch 33/50\n",
            "172/172 [==============================] - 10s 54ms/step - loss: 0.4462\n",
            "Epoch 34/50\n",
            "172/172 [==============================] - 10s 54ms/step - loss: 0.4377\n",
            "Epoch 35/50\n",
            "172/172 [==============================] - 10s 54ms/step - loss: 0.4338\n",
            "Epoch 36/50\n",
            "172/172 [==============================] - 11s 55ms/step - loss: 0.4299\n",
            "Epoch 37/50\n",
            "172/172 [==============================] - 11s 55ms/step - loss: 0.4266\n",
            "Epoch 38/50\n",
            "172/172 [==============================] - 10s 54ms/step - loss: 0.4270\n",
            "Epoch 39/50\n",
            "172/172 [==============================] - 10s 54ms/step - loss: 0.4278\n",
            "Epoch 40/50\n",
            "172/172 [==============================] - 10s 54ms/step - loss: 0.4249\n",
            "Epoch 41/50\n",
            "172/172 [==============================] - 11s 55ms/step - loss: 0.4230\n",
            "Epoch 42/50\n",
            "172/172 [==============================] - 11s 56ms/step - loss: 0.4239\n",
            "Epoch 43/50\n",
            "172/172 [==============================] - 10s 54ms/step - loss: 0.4221\n",
            "Epoch 44/50\n",
            "172/172 [==============================] - 10s 54ms/step - loss: 0.4193\n",
            "Epoch 45/50\n",
            "172/172 [==============================] - 11s 54ms/step - loss: 0.4174\n",
            "Epoch 46/50\n",
            "172/172 [==============================] - 10s 54ms/step - loss: 0.4199\n",
            "Epoch 47/50\n",
            "172/172 [==============================] - 11s 55ms/step - loss: 0.4210\n",
            "Epoch 48/50\n",
            "172/172 [==============================] - 11s 54ms/step - loss: 0.4201\n",
            "Epoch 49/50\n",
            "172/172 [==============================] - 11s 55ms/step - loss: 0.4212\n",
            "Epoch 50/50\n",
            "172/172 [==============================] - 10s 54ms/step - loss: 0.4223\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "\"\"\"\n",
        "Each time you call the model you pass in some text and an internal state. The model returns a prediction for the next character and its new state. Pass the prediction and state back in to continue generating text.\n",
        "\"\"\"\n",
        "#The following makes a single step prediction:\n",
        "\n",
        "class OneStep(tf.keras.Model):\n",
        "  def __init__(self, model, chars_from_ids, ids_from_chars, temperature=1.0):\n",
        "    super().__init__()\n",
        "    self.temperature = temperature\n",
        "    self.model = model\n",
        "    self.chars_from_ids = chars_from_ids\n",
        "    self.ids_from_chars = ids_from_chars\n",
        "\n",
        "    # Create a mask to prevent \"[UNK]\" from being generated.\n",
        "    skip_ids = self.ids_from_chars(['[UNK]'])[:, None]\n",
        "    sparse_mask = tf.SparseTensor(\n",
        "        # Put a -inf at each bad index.\n",
        "        values=[-float('inf')]*len(skip_ids),\n",
        "        indices=skip_ids,\n",
        "        # Match the shape to the vocabulary\n",
        "        dense_shape=[len(ids_from_chars.get_vocabulary())])\n",
        "    self.prediction_mask = tf.sparse.to_dense(sparse_mask)\n",
        "\n",
        "  @tf.function\n",
        "  def generate_one_step(self, inputs, states=None):\n",
        "    # Convert strings to token IDs.\n",
        "    input_chars = tf.strings.unicode_split(inputs, 'UTF-8')\n",
        "    input_ids = self.ids_from_chars(input_chars).to_tensor()\n",
        "\n",
        "    # Run the model.\n",
        "    # predicted_logits.shape is [batch, char, next_char_logits]\n",
        "    predicted_logits, states = self.model(inputs=input_ids, states=states,\n",
        "                                          return_state=True)\n",
        "    # Only use the last prediction.\n",
        "    predicted_logits = predicted_logits[:, -1, :]\n",
        "    predicted_logits = predicted_logits/self.temperature\n",
        "    # Apply the prediction mask: prevent \"[UNK]\" from being generated.\n",
        "    predicted_logits = predicted_logits + self.prediction_mask\n",
        "\n",
        "    # Sample the output logits to generate token IDs.\n",
        "    predicted_ids = tf.random.categorical(predicted_logits, num_samples=1)\n",
        "    predicted_ids = tf.squeeze(predicted_ids, axis=-1)\n",
        "\n",
        "    # Convert from token ids to characters\n",
        "    predicted_chars = self.chars_from_ids(predicted_ids)\n",
        "\n",
        "    # Return the characters and model state.\n",
        "    return predicted_chars, states"
      ],
      "metadata": {
        "id": "CBPxkjFDinVg"
      },
      "execution_count": 28,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "#Generate text\n",
        "\n",
        "one_step_model = OneStep(model, chars_from_ids, ids_from_chars)\n",
        "start = time.time()\n",
        "states = None\n",
        "next_char = tf.constant(['ROMEO:'])\n",
        "result = [next_char]\n",
        "\n",
        "for n in range(1000):\n",
        "  next_char, states = one_step_model.generate_one_step(next_char, states=states)\n",
        "  result.append(next_char)\n",
        "\n",
        "result = tf.strings.join(result)\n",
        "end = time.time()\n",
        "print(result[0].numpy().decode('utf-8'), '\\n\\n' + '_'*80)\n",
        "print('\\nRun time:', end - start)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "AUaORcveioRQ",
        "outputId": "8a58f01e-f754-459f-fa33-82f6068a7222"
      },
      "execution_count": 29,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "ROMEO:\n",
            "This is the issue of this fellow?\n",
            "\n",
            "ABRAHAM:\n",
            "Do you hear how he will take it.\n",
            "\n",
            "CORIOLANUS:\n",
            "Prithee, kept our humble grace!\n",
            "You keep is for my life to supplered!\n",
            "\n",
            "KING HENRY VI:\n",
            "Fell--nothing but my life, my dear will I saw the people!\n",
            "Goss this; For that with our kneel by the\n",
            "wardets the wretched words o' the sea:\n",
            "Stay within this hour but seekers could my skins,\n",
            "Common voices not upon me. Hear have I forgot\n",
            "Then now, sitch Barnardine!'\n",
            "A fitt and smile perceive's blood\n",
            "Farewell, fortune keeps in earth. I am lace.\n",
            "Is that thou sound'sterlice's aduence? but I stand on\n",
            "The parlor of foul divines; those that have been so\n",
            "cold folly, you shall have more time.\n",
            "\n",
            "SICINIUS:\n",
            "Let's make the beggner.\n",
            "\n",
            "CLIFFORD:\n",
            "My neward will I forge thee slaughter'd him,\n",
            "Your loving brother such as you, she doth;\n",
            "And when commands the duke is chooked at the means?\n",
            "\n",
            "KING HENRY VI:\n",
            "So for my past, play, as the case is much;\n",
            "Theretation's reason with him, he'ld over-rut me with a\n",
            "bewiddable against the gates of men \n",
            "\n",
            "________________________________________________________________________________\n",
            "\n",
            "Run time: 3.1045782566070557\n"
          ]
        }
      ]
    }
  ]
}